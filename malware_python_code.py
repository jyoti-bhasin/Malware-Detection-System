#  INTRUSION(MALWARE) DETECTION SYSTEM

#Importing ProfileReport and installing pefile
from pandas_profiling import ProfileReport
!pip install pefile

#Importing pandas library and drive and reading the dataset.
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/MyDrive/MalwareData.csv.gz"
malData = pd.read_csv(path,sep = "|")
malData.describe

#Removing/dropping the legitimate column from our dataset.

legit = malData[0:41323].drop(["legitimate"],axis = 1)
mal = malData[41323::].drop(["legitimate"],axis = 1)

print("The number of samples of the legit dataset is: %s samples,%s features"%(legit.shape[0],legit.shape[1]))
print("The number of samples of the malware dataset is: %s samples,%s features"%(mal.shape[0],mal.shape[1]))

#Printing features of the dataset.

print(malData.columns)

print(malData.head(5))

#Setting max columns to none, to display all the columns of dataset.

pd.set_option("display.max_columns", None)

print(malData.head(5))

#Printing the information of one specific index(ie row).

print(legit.take([1]))

print(mal.take([1]))

#Importing sklearn and required modules.

import sklearn
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split

#Fitting the ExtraTreesClassifier on our dataset, and printing the shape.

data_in = malData.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = malData['legitimate'].values
extratrees = ExtraTreesClassifier().fit(data_in,labels)
select= SelectFromModel(extratrees,prefit=True)
data_in_new = select.transform(data_in)
print(data_in.shape,data_in_new.shape)

#Importing NumPy library and using feature_importances_ to predict most important features(columns).

import numpy as np
features = data_in_new.shape[1]
importances = extratrees.feature_importances_
indices = np.argsort(importances)[::-1]

for f in range(features):
  print("%d"%(f+1),malData.columns[2+indices[f]],importances[indices[f]])

#Importing RandomForestClassifier and fitting it on our dataset using train_test_split method, taking test size as 0.2 ie 20% samples for test model.

from sklearn import model_selection
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

legit_train, legit_test, mal_train, mal_test = model_selection.train_test_split(data_in_new, labels, test_size = 0.2)
classif = RandomForestClassifier(n_estimators=50)

classif.fit(legit_train,mal_train)

#Calculating score/accuracy of model.

print("The score of the algorithm: ",classif.score(legit_test,mal_test)*100)

#Importing confusion_matrix for calculating predictions.

from sklearn.metrics import confusion_matrix

result = classif.predict(legit_test)
conf_mat = confusion_matrix(mal_test,result)

#Printing shape and type of the confusion matrix.

conf_mat.shape

type(conf_mat)

#Printing confusion matrix and false positives and false negatives.

conf_mat

print("False positives : ",conf_mat[0][1]/sum(conf_mat[0])*100)
print("False negatives : ",conf_mat[1][0]/sum(conf_mat[1])*100)
